// Copyright (C) 2021, Chao Xu
//
// Part of cpp2kdb, which is released under BSD license. See LICENSE for full
// details.
#ifndef CPP2KDB_Q_TYPES_H__
#define CPP2KDB_Q_TYPES_H__
/// \file cpp2kdb/q_types.h

#include <cstdint>
#include <string>

namespace cpp2kdb {
/// Define the 16 byte GUID type (or U) in KDB.
struct QGuid {
  /// Value of the GUID. 4 4-byte int's should be 16 bytes.
  int value[4];
};

// Make sure QGuid is 16 bytes
static_assert(sizeof(QGuid) == 16, "QGuid type should be 16");

/// Getting the Q Type Id of the given C++ Type.
/// This will return the vector type of the corresponding atom type.
/// For example, for char in q, it will return 10 (instead of -10).
/// \tparam T C Type
template <typename T>
class QTypeId {};
/// Helper variable for q_type_id
template <typename T>
inline constexpr const int q_type_id = QTypeId<T>::type_id;

/// Getting the C Type from the given Q Type ID.
/// Reference for the c_type in the class.
/// \tparam NQTypeId Input Q Type Id
template <int NQTypeId>
class CTypeForQTypeIdHolder {};
/// C Type for the corresponding Q Type Id
template <int NQTypeId>
using CTypeForQTypeId = typename CTypeForQTypeIdHolder<NQTypeId>::CType;

{{#types}}
/////////////////////////////////////////////////////////////////////////
{{#c_type}}/// Q Type Id for C Type {{c_type}}, which is {{q_type}} in q, {{q_type_define}}={{q_type_id}}
/// {{#extra_comment}}{{extra_comment}}{{/extra_comment}}
template <>
class QTypeId<{{c_type}}> { {{#nolint}}  // NOLINT{{/nolint}}
 public:
  /// Q Type {{q_type}}, {{q_type_define}}={{q_type_id}}
  constexpr static const int type_id = {{q_type_id}};{{#nolint}}  // NOLINT{{/nolint}}
};{{/c_type}}{{^c_type}}// No C Type is mapped to q type {{q_type}}{{/c_type}}
/// Helper variable for Q Type Id for {{q_type}}
constexpr const int q_{{q_type}}_type_id = {{#c_type}}q_type_id<{{c_type}}>{{/c_type}}{{^c_type}}{{q_type_id}}{{/c_type}};

/// C Type for Q Type {{q_type}} with {{q_type_define}}={{q_type_id}}
template <>
class CTypeForQTypeIdHolder<q_{{q_type}}_type_id> {
 public:
  /// Map {{q_type}}/{{q_type_id}}/{{q_type_define}} to {{c_type}}{{mapped_c_type}}
  typedef {{c_type}}{{mapped_c_type}} CType;
};

{{/types}}
/// Q Type Id for Table/Flip
constexpr const int q_table_type_id = 98;

/// Q Type Id for Dict/Keyed Table
constexpr const int q_dict_type_id = 99;

/// Q Type Id for error state
constexpr const int q_error_type_id = -128;

/// Q Type Id for mixed type list
constexpr const int q_mixed_type_id = 0;
} // namespace cpp2kdb
#endif // CPP2KDB_Q_TYPES_H__