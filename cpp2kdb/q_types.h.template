// Copyright (C) 2021, Chao Xu
//
// Part of cpp2kdb, which is released under BSD license. See LICENSE for full
// details.
#ifndef CPP2KDB_Q_TYPES_H__
#define CPP2KDB_Q_TYPES_H__
/// \file cpp2kdb/q_types.h
/// Define mappings between q_type_id (an int) and c type.

#include <algorithm>
#include <cstdint>
#include <string>

/// Supporting Type Conversion Between C Type and Pointer Defined by Q Type Id
namespace cpp2kdb::q_types {
/// Define the 16 byte GUID type (or U) in KDB.
struct QGuid {
  /// Value of the GUID. 4 4-byte int's should be 16 bytes.
  int value[4];
};

// Make sure QGuid is 16 bytes
static_assert(sizeof(QGuid) == 16, "QGuid type should be 16");

/// Getting the Q Type Id of the given C++ Type.
/// This will return the vector type of the corresponding atom type.
/// For example, for char in q, it will return 10 (instead of -10).
/// \tparam T C Type
template <typename T>
class QTypeId {};
/// Helper variable for q_type_id
template <typename T>
inline constexpr const int q_type_id = QTypeId<T>::type_id;

/// Getting the C Type from the given Q Type ID.
/// Reference for the c_type in the class.
/// \tparam NQTypeId Input Q Type Id
template <int NQTypeId>
class CTypeForQTypeIdHolder {};
/// C Type for the corresponding Q Type Id
template <int NQTypeId>
using CTypeForQTypeId = typename CTypeForQTypeIdHolder<NQTypeId>::CType;

{{#arithmetic_types}}
/***************************************************************************/
{{#c_type}}/// Q Type Id for C Type {{c_type}}, which is {{q_type}} in q, {{q_type_define}}={{q_type_id}}
/// {{#extra_comment}}{{extra_comment}}{{/extra_comment}}
template <>
class QTypeId<{{c_type}}> { {{#nolint}}  // NOLINT{{/nolint}}
 public:
  /// Q Type {{q_type}}, {{q_type_define}}={{q_type_id}}
  constexpr static const int type_id = {{q_type_id}};
};{{/c_type}}{{^c_type}}// No C Type is mapped to q type {{q_type}}{{/c_type}}
/// Helper variable for Q Type Id for {{q_type}}
constexpr const int q_{{q_type}}_type_id = {{#c_type}}q_type_id<{{c_type}}>{{/c_type}}{{^c_type}}{{q_type_id}}{{/c_type}};{{#nolint}}  // NOLINT{{/nolint}}

/// C Type for Q Type {{q_type}} with {{q_type_define}}={{q_type_id}}
template <>
class CTypeForQTypeIdHolder<q_{{q_type}}_type_id> {
 public:
  /// Map {{q_type}}/{{q_type_id}}/{{q_type_define}} to {{c_type}}{{mapped_c_type}}
  typedef {{c_type}}{{mapped_c_type}} CType;{{#nolint}}  // NOLINT{{/nolint}}
};

{{/arithmetic_types}}
{{#nonarithmetic_types}}
/***************************************************************************/
{{#c_type}}/// Q Type Id for C Type {{c_type}}, which is {{q_type}} in q, {{q_type_define}}={{q_type_id}}
/// {{#extra_comment}}{{extra_comment}}{{/extra_comment}}
template <>
class QTypeId<{{c_type}}> { {{#nolint}}  // NOLINT{{/nolint}}
 public:
  /// Q Type {{q_type}}, {{q_type_define}}={{q_type_id}}
  constexpr static const int type_id = {{q_type_id}};
};{{/c_type}}{{^c_type}}// No C Type is mapped to q type {{q_type}}{{/c_type}}
/// Helper variable for Q Type Id for {{q_type}}
constexpr const int q_{{q_type}}_type_id = {{#c_type}}q_type_id<{{c_type}}>{{/c_type}}{{^c_type}}{{q_type_id}}{{/c_type}};{{#nolint}}  // NOLINT{{/nolint}}

/// C Type for Q Type {{q_type}} with {{q_type_define}}={{q_type_id}}
template <>
class CTypeForQTypeIdHolder<q_{{q_type}}_type_id> {
 public:
  /// Map {{q_type}}/{{q_type_id}}/{{q_type_define}} to {{c_type}}{{mapped_c_type}}
  typedef {{c_type}}{{mapped_c_type}} CType;{{#nolint}}  // NOLINT{{/nolint}}
};

{{/nonarithmetic_types}}

/// Q Type Id for Table/Flip
constexpr const int q_table_type_id = 98;

/// Q Type Id for Dict/Keyed Table
constexpr const int q_dict_type_id = 99;

/// Q Type Id for error state
constexpr const int q_error_type_id = -128;

/// Q Type Id for mixed type list
constexpr const int q_mixed_type_id = 0;

/***************************************************************************/
/// Check if C Type T is mapped to input_q_type_id
template <typename T>
constexpr bool IsCTypeMappedToQTypeId(
    /// Input Q Type Id
    int input_q_type_id) {
  return
      // Not Error
      input_q_type_id != q_error_type_id &&
      // mapped id is input_q_type_id
      q_type_id<T> ==
          (input_q_type_id > 0 ? input_q_type_id : -input_q_type_id);
}

/// Check if input_q_type_id is mapped to int
///
/// This works both for atomic types and vector types.
constexpr bool IsQTypeIdInt(
    /// Input Q Type Id
    int input_q_type_id) {
  // If the input is negative, make it positive.
  int positive_q_type_id =
      input_q_type_id > 0 ? input_q_type_id : -input_q_type_id;
  // Iterate through all the possible types, including int.
  return positive_q_type_id == q_time_type_id ||
         positive_q_type_id == q_month_type_id ||
         positive_q_type_id == q_date_type_id ||
         positive_q_type_id == q_minute_type_id ||
         positive_q_type_id == q_second_type_id ||
         positive_q_type_id == q_type_id<int>;
}

/// Check if input_q_type_id is mapped to std::int64_t
constexpr bool IsQTypeIdInt64(
    /// Input Q Type Id
    int input_q_type_id) {
  // If the input is negative, make it positive.
  int positive_q_type_id =
      input_q_type_id > 0 ? input_q_type_id : -input_q_type_id;
  return positive_q_type_id == q_timestamp_type_id ||
         positive_q_type_id == q_timespan_type_id ||
         positive_q_type_id == q_type_id<std::int64_t>;
}

/// Check if input_q_type_id is mapped to double
constexpr bool IsQTypeIdDouble(
    /// Input Q Type Id
    int input_q_type_id) {
  // If the input is negative, make it positive.
  int positive_q_type_id =
      input_q_type_id > 0 ? input_q_type_id : -input_q_type_id;
  return positive_q_type_id == q_datetime_type_id ||
         positive_q_type_id == q_type_id<double>;
}

/// Check if input_q_type_id is mapped to std::string.
/// char list, which is type 10, is also a std;;string, but not -10, which is a
/// single char.
constexpr bool IsQTypeIdString(
    /// Input Q Type Id
    int input_q_type_id) {
  return input_q_type_id == q_type_id<std::string> ||
         input_q_type_id == q_type_id<char> ||
	 input_q_type_id == -q_type_id<std::string>;
}

/// Check if the type indicted by q_type_id is the same as T
/// \tparam T input c_type to check.
template <typename T>
constexpr bool IsSameType(
    /// Input q type id
    int input_q_type_id) {
  return  // Check if C type is mapped directly to this id.
      IsCTypeMappedToQTypeId<T>(input_q_type_id) ||
      // Check if the ID is an int
      (std::is_same_v<int, T> && IsQTypeIdInt(input_q_type_id)) ||
      // Check if the ID is a std::int64_t
      (std::is_same_v<std::int64_t, T> && IsQTypeIdInt64(input_q_type_id)) ||
      // Check if the ID is a double
      (std::is_same_v<double, T> && IsQTypeIdDouble(input_q_type_id)) ||
      // Check if the ID is a string
      (std::is_same_v<std::string, T> && IsQTypeIdString(input_q_type_id));
}

/// Check if the q type id is -128/error.
constexpr bool IsQTypeIdError(int input_q_type_id) {
  return input_q_type_id == q_error_type_id;
}

/// Check if the q type id is atomic
constexpr bool IsQTypeIdAtomic(int input_q_type_id) {
  return input_q_type_id < 0 && !IsQTypeIdError(input_q_type_id);
}

/// Check if the q type id is table/98.
/// Note this does **NOT** check if it's keyed table.
constexpr bool IsQTypeIdTable(int input_q_type_id) {
  return input_q_type_id == q_table_type_id;
}

/// Check if the q type id is dict.
/// Note the actual may be a keyed table, which is also a dict.
constexpr bool IsQTypeIdDict(int input_q_type_id) {
  return input_q_type_id == q_dict_type_id;
}

/// Check if the q type id is a vector
///
/// This checks if q type id is >= 0, not a table or dict
constexpr bool IsQTypeIdVector(int input_q_type_id) {
  return input_q_type_id >= 0 && !IsQTypeIdTable(input_q_type_id) &&
         !IsQTypeIdDict(input_q_type_id);
}

/// Check if the q type id is a mixed vector.
///
/// Thsi checks if the q type id is 0.
constexpr bool IsQTypeIdMixedVector(int input_q_type_id) {
  return input_q_type_id == q_mixed_type_id;
}

/// Get Atomic Value indicated by q_type_id into a T*
///
/// \tparam T Desired type for output.
/// \returns A bool indicate if copy is performed.
template <typename T, typename = std::enable_if_t<std::is_arithmetic_v<T>>>
bool TryGetAtomicValue(
    /// Q Type Id of void*
    int input_q_type_id,
    /// input data, which is the atomic value pointer from K, not the pointer.
    void* data,
    /// Output data.
    T* output) {
  // Switch case on input_q_type_id
  switch (input_q_type_id) {
{{#arithmetic_types}}  
    case -q_{{q_type}}_type_id: {
      // {{q_type}} is mapped to {{c_type}}{{mapped_c_type}}    
      *output = static_cast<T>(
          *(reinterpret_cast<CTypeForQTypeId<q_{{q_type}}_type_id>*>(data)));
      return true;
    }
{{/arithmetic_types}}
    default:
      return false;
  }
}

/// Get Atomic Value indicated by q_type_id into a std::string*.
/// This is only valid for symbol atomic type (-11).
/// \returns A bool indicate if copy is performed.
inline bool TryGetAtomicValue(
    /// Q Type Id of void*
    int input_q_type_id,
    /// input data, which is the atomic value pointer from K, not the pointer.
    void* data,
    /// Output data.
    std::string* output) {
  if (input_q_type_id != -q_symbol_type_id) {
    return false;
  }
  output->assign(*reinterpret_cast<char**>(data));
  return true;
}

/// Get Atomic Value indicated by q_type_id into a void**.
/// This is only valid for table type (98).
/// \returns A bool indicate if copy is performed.
inline bool TryGetAtomicValue(
    /// Q Type Id of void*
    int input_q_type_id,
    /// input data, which is the atomic value pointer from K, not the pointer.
    void* data,
    /// Output data.
    void** output) {
  if (input_q_type_id != q_table_type_id) {
    return false;
  }
  *output = *reinterpret_cast<void**>(data);
  return true;
}

/// Get Atomic Value indicated by q_type_id into a QGuid
/// This is only valid for Guid (-1).
/// \returns A bool indicate if copy is performed.
inline bool TryGetAtomicValue(
    /// Q Type Id of void*
    int input_q_type_id,
    /// input data, which is the atomic value pointer from K, not the pointer.
    void* data,
    /// Output data.
    QGuid* output) {
  if (input_q_type_id != -q_guid_type_id) {
    return false;
  }
  *output = *reinterpret_cast<QGuid*>(data);
  return true;
}

/***************************************************************************/
/// Copy from a void* indicated by q_type_id into a T*.
///
/// \tparam T Desired type for output.
/// \returns A bool indicate if copy is performed.
template <typename T>
bool TryCopyDataByQTypeIdAndType(
    /// Q Type Id of void*
    int input_q_type_id,
    /// Number of elements to copy.
    std::size_t number_of_elements,
    /// Input data, which is the vector data from K, not the pointer
    /// to K itself.
    void* input_data,
    /// Output data.
    T* output_data) {
  // Switch case on input_q_type_id
  switch (input_q_type_id) {
{{#arithmetic_types}}
    case q_{{q_type}}_type_id: {
      // {{q_type}} is mapped to {{c_type}}{{mapped_c_type}}
      CTypeForQTypeId<q_{{q_type}}_type_id>* typed_input_data =
          reinterpret_cast<CTypeForQTypeId<q_{{q_type}}_type_id>*>(input_data);
      std::copy_n(typed_input_data, number_of_elements, output_data);
      return true;
    }
{{/arithmetic_types}}
    default: {
      return false;
    }
  }
}
} // namespace cpp2kdb::q_types
#endif // CPP2KDB_Q_TYPES_H__